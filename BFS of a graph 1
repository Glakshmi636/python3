def storeBFS(startNode, result, adj, n, visited):
    visited[startNode] = True
    Q = [startNode]
 
    while len(Q) > 0:
        currNode = Q.pop(0)
        result.append(currNode)
 
        for j in adj[currNode]:
            if not visited[j]:
                visited[j] = True
                Q.append(j)
def printBFStraversal(adj, n):
    visited = [False] * (n+1) 
    result = []
    for i in range(1,n+1):
        if visited[i] == False:
            storeBFS(i, result, adj, n, visited)
    print(*result)
n, m = map(int, input().split())
adj = []
for _ in range(n+1): 
    adj.append([])
for i in range(m):
    u, v = map(int, input().split())
    adj[u].append(v)
    adj[v].append(u)
printBFStraversal(adj, n)
